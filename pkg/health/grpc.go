// Code generated by gitlab.dev.extlabs.ru/core/go-kit-service-generator  DO NOT EDIT.
package health

import (
	"context"
	"errors"

	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/transport/grpc"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	pb "github.com/griddis/atlant_test/cmd/service/pb"
	"github.com/griddis/atlant_test/tools/logging"
	googlegrpc "google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

type grpcServer struct {
	getLiveness  grpctransport.Handler
	getReadiness grpctransport.Handler
	getVersion   grpctransport.Handler
}

type ContextGRPCKey struct{}

type GRPCInfo struct{}

// NewGRPCServer makes a set of endpoints available as a gRPC healthServer.
func NewGRPCServer(s Service, logger log.Logger) pb.HealthServiceServer {
	options := []grpctransport.ServerOption{
		// grpctransport.ServerErrorLogger(logger),
		// grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "grpc server", logger)),
		grpctransport.ServerBefore(grpcToContext()),
	}

	return &grpcServer{
		getLiveness: grpctransport.NewServer(
			makeGetLivenessEndpoint(s),
			decodeGRPCGetLivenessRequest,
			encodeGRPCGetLivenessResponse,
			options...,
		),
		getReadiness: grpctransport.NewServer(
			makeGetReadinessEndpoint(s),
			decodeGRPCGetReadinessRequest,
			encodeGRPCGetReadinessResponse,
			options...,
		),
		getVersion: grpctransport.NewServer(
			makeGetVersionEndpoint(s),
			decodeGRPCGetVersionRequest,
			encodeGRPCGetVersionResponse,
			options...,
		),
	}
}

func JoinGRPC(ctx context.Context, s Service) func(*googlegrpc.Server) {
	logger := logging.FromContext(ctx)
	logger = logger.With("grpc handler", "health")
	return func(g *googlegrpc.Server) {
		pb.RegisterHealthServiceServer(g, NewGRPCServer(s, logger))
	}
}

func grpcToContext() grpc.ServerRequestFunc {
	return func(ctx context.Context, md metadata.MD) context.Context {
		return context.WithValue(ctx, ContextGRPCKey{}, GRPCInfo{})
	}
}

func (s *grpcServer) GetLiveness(ctx context.Context, req *pb.GetLivenessRequest) (*pb.GetLivenessRespone, error) {
	_, rep, err := s.getLiveness.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetLivenessRespone), nil
}

func (s *grpcServer) GetReadiness(ctx context.Context, req *pb.GetReadinessRequest) (*pb.GetReadinessResponse, error) {
	_, rep, err := s.getReadiness.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetReadinessResponse), nil
}

func (s *grpcServer) GetVersion(ctx context.Context, req *pb.GetVersionRequest) (*pb.GetVersionResponse, error) {
	_, rep, err := s.getVersion.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetVersionResponse), nil
}

func decodeGRPCGetLivenessRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*pb.GetLivenessRequest)
	if !ok {
		return nil, errors.New("decodeGRPCGetLivenessRequest wrong request")
	}

	req := PBToGetLivenessRequest(inReq)
	return *req, nil
}

func decodeGRPCGetReadinessRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*pb.GetReadinessRequest)
	if !ok {
		return nil, errors.New("decodeGRPCGetReadinessRequest wrong request")
	}

	req := PBToGetReadinessRequest(inReq)
	return *req, nil
}

func decodeGRPCGetVersionRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*pb.GetVersionRequest)
	if !ok {
		return nil, errors.New("decodeGRPCGetVersionRequest wrong request")
	}

	req := PBToGetVersionRequest(inReq)
	return *req, nil
}

func encodeGRPCGetLivenessResponse(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*GetLivenessRespone)
	if !ok {
		return nil, errors.New("encodeGRPCGetLivenessResponse wrong response")
	}

	return GetLivenessResponeToPB(inResp), nil
}

func encodeGRPCGetReadinessResponse(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*GetReadinessResponse)
	if !ok {
		return nil, errors.New("encodeGRPCGetReadinessResponse wrong response")
	}

	return GetReadinessResponseToPB(inResp), nil
}

func encodeGRPCGetVersionResponse(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*GetVersionResponse)
	if !ok {
		return nil, errors.New("encodeGRPCGetVersionResponse wrong response")
	}

	return GetVersionResponseToPB(inResp), nil
}

func GetLivenessRequestToPB(d *GetLivenessRequest) *pb.GetLivenessRequest {
	if d == nil {
		return nil
	}

	resp := pb.GetLivenessRequest{}

	return &resp
}

func PBToGetLivenessRequest(d *pb.GetLivenessRequest) *GetLivenessRequest {
	if d == nil {
		return nil
	}

	resp := GetLivenessRequest{}

	return &resp
}

func GetLivenessResponeToPB(d *GetLivenessRespone) *pb.GetLivenessRespone {
	if d == nil {
		return nil
	}

	resp := pb.GetLivenessRespone{
		Status: d.Status,
		Err:    d.Err,
	}

	return &resp
}

func PBToGetLivenessRespone(d *pb.GetLivenessRespone) *GetLivenessRespone {
	if d == nil {
		return nil
	}

	resp := GetLivenessRespone{
		Status: d.Status,
		Err:    d.Err,
	}

	return &resp
}

func GetReadinessRequestToPB(d *GetReadinessRequest) *pb.GetReadinessRequest {
	if d == nil {
		return nil
	}

	resp := pb.GetReadinessRequest{}

	return &resp
}

func PBToGetReadinessRequest(d *pb.GetReadinessRequest) *GetReadinessRequest {
	if d == nil {
		return nil
	}

	resp := GetReadinessRequest{}

	return &resp
}

func GetReadinessResponseToPB(d *GetReadinessResponse) *pb.GetReadinessResponse {
	if d == nil {
		return nil
	}

	resp := pb.GetReadinessResponse{
		Status: d.Status,
		Err:    d.Err,
	}

	return &resp
}

func PBToGetReadinessResponse(d *pb.GetReadinessResponse) *GetReadinessResponse {
	if d == nil {
		return nil
	}

	resp := GetReadinessResponse{
		Status: d.Status,
		Err:    d.Err,
	}

	return &resp
}

func GetVersionRequestToPB(d *GetVersionRequest) *pb.GetVersionRequest {
	if d == nil {
		return nil
	}

	resp := pb.GetVersionRequest{}

	return &resp
}

func PBToGetVersionRequest(d *pb.GetVersionRequest) *GetVersionRequest {
	if d == nil {
		return nil
	}

	resp := GetVersionRequest{}

	return &resp
}

func GetVersionResponseToPB(d *GetVersionResponse) *pb.GetVersionResponse {
	if d == nil {
		return nil
	}

	resp := pb.GetVersionResponse{
		Version: VersionToPB(&d.Version),
		Err:     d.Err,
	}

	return &resp
}

func PBToGetVersionResponse(d *pb.GetVersionResponse) *GetVersionResponse {
	if d == nil {
		return nil
	}

	resp := GetVersionResponse{
		Version: *PBToVersion(d.Version),
		Err:     d.Err,
	}

	return &resp
}

func VersionToPB(d *RespVersion) *pb.Version {
	if d == nil {
		return nil
	}

	resp := pb.Version{
		BuildTime: d.BuildTime,
		Commit:    d.Commit,
		Version:   d.Version,
	}

	return &resp
}

func PBToVersion(d *pb.Version) *RespVersion {
	if d == nil {
		return nil
	}

	resp := RespVersion{
		BuildTime: d.BuildTime,
		Commit:    d.Commit,
		Version:   d.Version,
	}

	return &resp
}
