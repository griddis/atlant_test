// Code generated by gitlab.dev.extlabs.ru/core/go-kit-service-generator  DO NOT EDIT.
package health

import (
	"context"
	"errors"

	pb "github.com/griddis/atlant_test/cmd/service/pb"

	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"
	"google.golang.org/grpc"
)

// NewGRPCClient returns an Service backed by a gRPC server at the other end
// of the conn. The caller is responsible for constructing the conn, and
// eventually closing the underlying transport. We bake-in certain middlewares,
// implementing the client library pattern.
func NewGRPCClient(conn *grpc.ClientConn, tracer stdopentracing.Tracer, logger log.Logger) Service {
	// global client middlewares
	options := []grpctransport.ClientOption{
		grpctransport.ClientBefore(opentracing.ContextToGRPC(tracer, logger)),
	}

	return endpoints{
		// Each individual endpoint is an grpc/transport.Client (which implements
		// endpoint.Endpoint) that gets wrapped with various middlewares. If you
		// made your own client library, you'd do this work there, so your server
		// could rely on a consistent set of client behavior.
		GetLivenessEndpoint: grpctransport.NewClient(
			conn,
			"srmspb.HealthService",
			"GetLiveness",
			encodeGRPCGetLivenessRequest,
			decodeGRPCGetLivenessRespone,
			pb.GetLivenessRespone{},
			options...,
		).Endpoint(),
		GetReadinessEndpoint: grpctransport.NewClient(
			conn,
			"srmspb.HealthService",
			"GetReadiness",
			encodeGRPCGetReadinessRequest,
			decodeGRPCGetReadinessResponse,
			pb.GetReadinessResponse{},
			options...,
		).Endpoint(),
		GetVersionEndpoint: grpctransport.NewClient(
			conn,
			"srmspb.HealthService",
			"GetVersion",
			encodeGRPCGetVersionRequest,
			decodeGRPCGetVersionResponse,
			pb.GetVersionResponse{},
			options...,
		).Endpoint(),
	}
}

func encodeGRPCGetLivenessRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*GetLivenessRequest)
	if !ok {
		return nil, errors.New("encodeGRPCGetLivenessRequest wrong request")
	}

	return GetLivenessRequestToPB(inReq), nil
}

func encodeGRPCGetReadinessRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*GetReadinessRequest)
	if !ok {
		return nil, errors.New("encodeGRPCGetReadinessRequest wrong request")
	}

	return GetReadinessRequestToPB(inReq), nil
}

func encodeGRPCGetVersionRequest(_ context.Context, request interface{}) (interface{}, error) {
	inReq, ok := request.(*GetVersionRequest)
	if !ok {
		return nil, errors.New("encodeGRPCGetVersionRequest wrong request")
	}

	return GetVersionRequestToPB(inReq), nil
}

func decodeGRPCGetLivenessRespone(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*pb.GetLivenessRespone)
	if !ok {
		return nil, errors.New("decodeGRPCGetLivenessRespone wrong response")
	}

	resp := PBToGetLivenessRespone(inResp)

	return *resp, nil
}

func decodeGRPCGetReadinessResponse(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*pb.GetReadinessResponse)
	if !ok {
		return nil, errors.New("decodeGRPCGetReadinessResponse wrong response")
	}

	resp := PBToGetReadinessResponse(inResp)

	return *resp, nil
}

func decodeGRPCGetVersionResponse(_ context.Context, response interface{}) (interface{}, error) {
	inResp, ok := response.(*pb.GetVersionResponse)
	if !ok {
		return nil, errors.New("decodeGRPCGetVersionResponse wrong response")
	}

	resp := PBToGetVersionResponse(inResp)

	return *resp, nil
}
