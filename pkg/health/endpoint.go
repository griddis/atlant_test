// Code generated by gitlab.dev.extlabs.ru/core/go-kit-service-generator  DO NOT EDIT.
package health

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

type GetLivenessRequest struct {
}

type GetLivenessRespone struct {
	Status string `json:"status,omitempty"`
	Err    string `json:"err,omitempty"`
}

type GetReadinessRequest struct {
}

type GetReadinessResponse struct {
	Status string `json:"status,omitempty"`
	Err    string `json:"err,omitempty"`
}

type GetVersionRequest struct {
}

type GetVersionResponse struct {
	Version RespVersion `json:"version,omitempty"`
	Err     string      `json:"err,omitempty"`
}

type RespVersion struct {
	BuildTime string `json:"buildTime,omitempty"`
	Commit    string `json:"commit,omitempty"`
	Version   string `json:"version,omitempty"`
}

type endpoints struct {
	GetLivenessEndpoint  endpoint.Endpoint
	GetReadinessEndpoint endpoint.Endpoint
	GetVersionEndpoint   endpoint.Endpoint
}

func (e endpoints) GetLiveness(ctx context.Context, req *GetLivenessRequest) (resp *GetLivenessRespone, err error) {
	response, err := e.GetLivenessEndpoint(ctx, req)
	if err != nil {
		return nil, err
	}
	r := response.(GetLivenessRespone)
	return &r, err
}

func (e endpoints) GetReadiness(ctx context.Context, req *GetReadinessRequest) (resp *GetReadinessResponse, err error) {
	response, err := e.GetReadinessEndpoint(ctx, req)
	if err != nil {
		return nil, err
	}
	r := response.(GetReadinessResponse)
	return &r, err
}

func (e endpoints) GetVersion(ctx context.Context, req *GetVersionRequest) (resp *GetVersionResponse, err error) {
	response, err := e.GetVersionEndpoint(ctx, req)
	if err != nil {
		return nil, err
	}
	r := response.(GetVersionResponse)
	return &r, err
}

func makeGetLivenessEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetLivenessRequest)
		return s.GetLiveness(ctx, &req)
	}
}

func makeGetReadinessEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetReadinessRequest)
		return s.GetReadiness(ctx, &req)
	}
}

func makeGetVersionEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetVersionRequest)
		return s.GetVersion(ctx, &req)
	}
}
