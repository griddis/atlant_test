// Code generated by MockGen. DO NOT EDIT.
// Source: mongodb_abstract_layer.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	options "go.mongodb.org/mongo-driver/mongo/options"
	reflect "reflect"
)

// MockIMongoClient is a mock of IMongoClient interface
type MockIMongoClient struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoClientMockRecorder
}

// MockIMongoClientMockRecorder is the mock recorder for MockIMongoClient
type MockIMongoClientMockRecorder struct {
	mock *MockIMongoClient
}

// NewMockIMongoClient creates a new mock instance
func NewMockIMongoClient(ctrl *gomock.Controller) *MockIMongoClient {
	mock := &MockIMongoClient{ctrl: ctrl}
	mock.recorder = &MockIMongoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoClient) EXPECT() *MockIMongoClientMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockIMongoClient) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockIMongoClientMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIMongoClient)(nil).Connect), ctx)
}

// Disconnect mocks base method
func (m *MockIMongoClient) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockIMongoClientMockRecorder) Disconnect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockIMongoClient)(nil).Disconnect), ctx)
}

// Database mocks base method
func (m *MockIMongoClient) Database(name string, opts ...*options.DatabaseOptions) IMongoDatabase {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Database", varargs...)
	ret0, _ := ret[0].(IMongoDatabase)
	return ret0
}

// Database indicates an expected call of Database
func (mr *MockIMongoClientMockRecorder) Database(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockIMongoClient)(nil).Database), varargs...)
}

// MockIMongoDatabase is a mock of IMongoDatabase interface
type MockIMongoDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoDatabaseMockRecorder
}

// MockIMongoDatabaseMockRecorder is the mock recorder for MockIMongoDatabase
type MockIMongoDatabaseMockRecorder struct {
	mock *MockIMongoDatabase
}

// NewMockIMongoDatabase creates a new mock instance
func NewMockIMongoDatabase(ctrl *gomock.Controller) *MockIMongoDatabase {
	mock := &MockIMongoDatabase{ctrl: ctrl}
	mock.recorder = &MockIMongoDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoDatabase) EXPECT() *MockIMongoDatabaseMockRecorder {
	return m.recorder
}

// Collection mocks base method
func (m *MockIMongoDatabase) Collection(name string, opts ...*options.CollectionOptions) IMongoCollection {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collection", varargs...)
	ret0, _ := ret[0].(IMongoCollection)
	return ret0
}

// Collection indicates an expected call of Collection
func (mr *MockIMongoDatabaseMockRecorder) Collection(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockIMongoDatabase)(nil).Collection), varargs...)
}

// MockIMongoDeleteResult is a mock of IMongoDeleteResult interface
type MockIMongoDeleteResult struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoDeleteResultMockRecorder
}

// MockIMongoDeleteResultMockRecorder is the mock recorder for MockIMongoDeleteResult
type MockIMongoDeleteResultMockRecorder struct {
	mock *MockIMongoDeleteResult
}

// NewMockIMongoDeleteResult creates a new mock instance
func NewMockIMongoDeleteResult(ctrl *gomock.Controller) *MockIMongoDeleteResult {
	mock := &MockIMongoDeleteResult{ctrl: ctrl}
	mock.recorder = &MockIMongoDeleteResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoDeleteResult) EXPECT() *MockIMongoDeleteResultMockRecorder {
	return m.recorder
}

// MockIMongoInsertOneResult is a mock of IMongoInsertOneResult interface
type MockIMongoInsertOneResult struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoInsertOneResultMockRecorder
}

// MockIMongoInsertOneResultMockRecorder is the mock recorder for MockIMongoInsertOneResult
type MockIMongoInsertOneResultMockRecorder struct {
	mock *MockIMongoInsertOneResult
}

// NewMockIMongoInsertOneResult creates a new mock instance
func NewMockIMongoInsertOneResult(ctrl *gomock.Controller) *MockIMongoInsertOneResult {
	mock := &MockIMongoInsertOneResult{ctrl: ctrl}
	mock.recorder = &MockIMongoInsertOneResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoInsertOneResult) EXPECT() *MockIMongoInsertOneResultMockRecorder {
	return m.recorder
}

// MockIMongoCollection is a mock of IMongoCollection interface
type MockIMongoCollection struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoCollectionMockRecorder
}

// MockIMongoCollectionMockRecorder is the mock recorder for MockIMongoCollection
type MockIMongoCollectionMockRecorder struct {
	mock *MockIMongoCollection
}

// NewMockIMongoCollection creates a new mock instance
func NewMockIMongoCollection(ctrl *gomock.Controller) *MockIMongoCollection {
	mock := &MockIMongoCollection{ctrl: ctrl}
	mock.recorder = &MockIMongoCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoCollection) EXPECT() *MockIMongoCollectionMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockIMongoCollection) Find(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (IMongoCursor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(IMongoCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockIMongoCollectionMockRecorder) Find(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIMongoCollection)(nil).Find), varargs...)
}

// FindOne mocks base method
func (m *MockIMongoCollection) FindOne(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) IMongoSingleResult {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(IMongoSingleResult)
	return ret0
}

// FindOne indicates an expected call of FindOne
func (mr *MockIMongoCollectionMockRecorder) FindOne(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockIMongoCollection)(nil).FindOne), varargs...)
}

// InsertOne mocks base method
func (m *MockIMongoCollection) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (IMongoInsertOneResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, document}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(IMongoInsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne
func (mr *MockIMongoCollectionMockRecorder) InsertOne(ctx, document interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, document}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockIMongoCollection)(nil).InsertOne), varargs...)
}

// DeleteMany mocks base method
func (m *MockIMongoCollection) DeleteMany(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (IMongoDeleteResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMany", varargs...)
	ret0, _ := ret[0].(IMongoDeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMany indicates an expected call of DeleteMany
func (mr *MockIMongoCollectionMockRecorder) DeleteMany(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockIMongoCollection)(nil).DeleteMany), varargs...)
}

// FindOneAndUpdate mocks base method
func (m *MockIMongoCollection) FindOneAndUpdate(ctx context.Context, filter, update interface{}, opts ...*options.FindOneAndUpdateOptions) IMongoSingleResult {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneAndUpdate", varargs...)
	ret0, _ := ret[0].(IMongoSingleResult)
	return ret0
}

// FindOneAndUpdate indicates an expected call of FindOneAndUpdate
func (mr *MockIMongoCollectionMockRecorder) FindOneAndUpdate(ctx, filter, update interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndUpdate", reflect.TypeOf((*MockIMongoCollection)(nil).FindOneAndUpdate), varargs...)
}

// MockIMongoSingleResult is a mock of IMongoSingleResult interface
type MockIMongoSingleResult struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoSingleResultMockRecorder
}

// MockIMongoSingleResultMockRecorder is the mock recorder for MockIMongoSingleResult
type MockIMongoSingleResultMockRecorder struct {
	mock *MockIMongoSingleResult
}

// NewMockIMongoSingleResult creates a new mock instance
func NewMockIMongoSingleResult(ctrl *gomock.Controller) *MockIMongoSingleResult {
	mock := &MockIMongoSingleResult{ctrl: ctrl}
	mock.recorder = &MockIMongoSingleResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoSingleResult) EXPECT() *MockIMongoSingleResultMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockIMongoSingleResult) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockIMongoSingleResultMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockIMongoSingleResult)(nil).Decode), v)
}

// MockIMongoCursor is a mock of IMongoCursor interface
type MockIMongoCursor struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoCursorMockRecorder
}

// MockIMongoCursorMockRecorder is the mock recorder for MockIMongoCursor
type MockIMongoCursorMockRecorder struct {
	mock *MockIMongoCursor
}

// NewMockIMongoCursor creates a new mock instance
func NewMockIMongoCursor(ctrl *gomock.Controller) *MockIMongoCursor {
	mock := &MockIMongoCursor{ctrl: ctrl}
	mock.recorder = &MockIMongoCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoCursor) EXPECT() *MockIMongoCursorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockIMongoCursor) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIMongoCursorMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIMongoCursor)(nil).Close), arg0)
}

// Next mocks base method
func (m *MockIMongoCursor) Next(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockIMongoCursorMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIMongoCursor)(nil).Next), arg0)
}

// Decode mocks base method
func (m *MockIMongoCursor) Decode(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockIMongoCursorMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockIMongoCursor)(nil).Decode), arg0)
}

// All mocks base method
func (m *MockIMongoCursor) All(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All
func (mr *MockIMongoCursorMockRecorder) All(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIMongoCursor)(nil).All), arg0, arg1)
}
